[
  {
    "objectID": "Homewrok_8.html",
    "href": "Homewrok_8.html",
    "title": "Homework 8",
    "section": "",
    "text": "my_sample&lt;-read_csv(\"SeoulBikeData.csv\", locale = vroom::locale(encoding = \"CP1252\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Homewrok_8.html#reading-data",
    "href": "Homewrok_8.html#reading-data",
    "title": "Homework 8",
    "section": "",
    "text": "my_sample&lt;-read_csv(\"SeoulBikeData.csv\", locale = vroom::locale(encoding = \"CP1252\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Homewrok_8.html#eda",
    "href": "Homewrok_8.html#eda",
    "title": "Homework 8",
    "section": "EDA",
    "text": "EDA\nFirst, we’ll check the missingness of the data.\n\ncolSums(is.na(my_sample))\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n\nNo data is missing. Then we determine the column types and create summary statistics.\n\nstr(my_sample)\n\nspc_tbl_ [8,760 × 14] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date                     : chr [1:8760] \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" ...\n $ Rented Bike Count        : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                     : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature(°C)          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity(%)              : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Wind speed (m/s)         : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility (10m)         : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew point temperature(°C): num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar Radiation (MJ/m2)  : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall(mm)             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall (cm)            : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons                  : chr [1:8760] \"Winter\" \"Winter\" \"Winter\" \"Winter\" ...\n $ Holiday                  : chr [1:8760] \"No Holiday\" \"No Holiday\" \"No Holiday\" \"No Holiday\" ...\n $ Functioning Day          : chr [1:8760] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_character(),\n  ..   `Rented Bike Count` = col_double(),\n  ..   Hour = col_double(),\n  ..   `Temperature(°C)` = col_double(),\n  ..   `Humidity(%)` = col_double(),\n  ..   `Wind speed (m/s)` = col_double(),\n  ..   `Visibility (10m)` = col_double(),\n  ..   `Dew point temperature(°C)` = col_double(),\n  ..   `Solar Radiation (MJ/m2)` = col_double(),\n  ..   `Rainfall(mm)` = col_double(),\n  ..   `Snowfall (cm)` = col_double(),\n  ..   Seasons = col_character(),\n  ..   Holiday = col_character(),\n  ..   `Functioning Day` = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nnumeric&lt;-my_sample[,c(-1, -12:-14)]\n\ncategorical&lt;-my_sample[,c(1, 12:14)]\n\nFor numeric variables:\n\nFUN = function(x) {\n  temp&lt;- c(mean(x), median(x), sd(x), min(x), max(x))\n  names(temp)&lt;- c(\"mean\", \"median\", \"sd\", \"min\", \"max\")\n  temp\n}\nsapply(numeric, FUN)\n\n       Rented Bike Count      Hour Temperature(°C) Humidity(%) Wind speed (m/s)\nmean            704.6021 11.500000        12.88292    58.22626         1.724909\nmedian          504.5000 11.500000        13.70000    57.00000         1.500000\nsd              644.9975  6.922582        11.94483    20.36241         1.036300\nmin               0.0000  0.000000       -17.80000     0.00000         0.000000\nmax            3556.0000 23.000000        39.40000    98.00000         7.400000\n       Visibility (10m) Dew point temperature(°C) Solar Radiation (MJ/m2)\nmean          1436.8258                  4.073813               0.5691107\nmedian        1698.0000                  5.100000               0.0100000\nsd             608.2987                 13.060369               0.8687462\nmin             27.0000                -30.600000               0.0000000\nmax           2000.0000                 27.200000               3.5200000\n       Rainfall(mm) Snowfall (cm)\nmean      0.1486872    0.07506849\nmedian    0.0000000    0.00000000\nsd        1.1281930    0.43674618\nmin       0.0000000    0.00000000\nmax      35.0000000    8.80000000\n\n\nFor categorical variables:\n\nsapply(sapply(categorical, unique), length)\n\n           Date         Seasons         Holiday Functioning Day \n            365               4               2               2 \n\n\nConvert the date variable into an actual date.\n\nmy_sample&lt;-my_sample|&gt;\n  mutate(Date = dmy(Date))\n\nSeasons, Holiday, and Functioning Day are converted to factors.\n\nmy_sample&lt;-my_sample|&gt;\n  mutate(Seasons = as.factor(Seasons), Holiday = as.factor(Holiday), \n         `Functioning Day` = as.factor(`Functioning Day`))\n\nWe’ll also rename the variables to be more user-friendly.\n\nmy_sample&lt;- my_sample|&gt;\n  rename('Rented_Bike_Count'=`Rented Bike Count`, \"Temperature\" = `Temperature(°C)`, \n         \"Rainfall\"=`Rainfall(mm)`, \"Snowfall\" = `Snowfall (cm)`, \"Humidity\" = `Humidity(%)`, \n         \"Wind_speed\" = `Wind speed (m/s)`,\"Visability\" = `Visibility (10m)`, \n         \"Dew_point_temperature\" = `Dew point temperature(°C)`,\"Solar_radiation\" = `Solar Radiation (MJ/m2)`, \n         \"Functioning_Day\" = `Functioning Day`)\n\nNow we’ll create some summary statistics.\n\nmy_sample_summary&lt;-my_sample|&gt;\n  group_by(Seasons, Holiday, Functioning_Day)|&gt;\n  summarize(across(where(is.numeric), list(\"mean\" = mean, \"sd\" = sd, \"min\"=min, \"max\"=max),\n                   .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'Seasons', 'Holiday'. You can override\nusing the `.groups` argument.\n\nmy_sample_summary\n\n# A tibble: 11 × 43\n# Groups:   Seasons, Holiday [8]\n   Seasons Holiday   Functioning_Day mean_Rented_Bike_Count sd_Rented_Bike_Count\n   &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt;                            &lt;dbl&gt;                &lt;dbl&gt;\n 1 Autumn  Holiday   No                                  0                    0 \n 2 Autumn  Holiday   Yes                               948.                 603.\n 3 Autumn  No Holid… No                                  0                    0 \n 4 Autumn  No Holid… Yes                               923.                 618.\n 5 Spring  Holiday   Yes                               635.                 609.\n 6 Spring  No Holid… No                                  0                    0 \n 7 Spring  No Holid… Yes                               750.                 619.\n 8 Summer  Holiday   Yes                              1022.                 564.\n 9 Summer  No Holid… Yes                              1034.                 693.\n10 Winter  Holiday   Yes                               157.                 108.\n11 Winter  No Holid… Yes                               232.                 152.\n# ℹ 38 more variables: min_Rented_Bike_Count &lt;dbl&gt;,\n#   max_Rented_Bike_Count &lt;dbl&gt;, mean_Hour &lt;dbl&gt;, sd_Hour &lt;dbl&gt;,\n#   min_Hour &lt;dbl&gt;, max_Hour &lt;dbl&gt;, mean_Temperature &lt;dbl&gt;,\n#   sd_Temperature &lt;dbl&gt;, min_Temperature &lt;dbl&gt;, max_Temperature &lt;dbl&gt;,\n#   mean_Humidity &lt;dbl&gt;, sd_Humidity &lt;dbl&gt;, min_Humidity &lt;dbl&gt;,\n#   max_Humidity &lt;dbl&gt;, mean_Wind_speed &lt;dbl&gt;, sd_Wind_speed &lt;dbl&gt;,\n#   min_Wind_speed &lt;dbl&gt;, max_Wind_speed &lt;dbl&gt;, mean_Visability &lt;dbl&gt;, …\n\n\nOn the non-functioning days, no bikes are rented. Any 0 in Rented_Bike_Count for non-functioning days is not meaningful. We’ll subset the Functioning_Day to only eaul “Yes”.\n\nmy_sample_functioning&lt;- my_sample|&gt;\n  filter(Functioning_Day == \"Yes\")\n\nWe’ll summarize caross hours, so each day only has one observation. The data will be grouped by Date, Seasons, and Holiday. We’ll find the average of all the numeric variables (so we’ll know the average temperature on a particular, etc.) and we’ll sum the total bikes, rain, and snow )so we’ll know the total over a particular day).\n\nmy_sample_final&lt;-my_sample_functioning|&gt;\n  group_by(Date, Seasons, Holiday)|&gt;\n  summarize(sum_bikes = sum(Rented_Bike_Count), sum_rain = sum(Rainfall), sum_snow = sum(Snowfall),\n            across(where(is.numeric), list(\"mean\" = mean),\n                   .names = \"{.fn}_{.col}\"))|&gt;\n  select(-mean_Hour, -mean_sum_bikes, -mean_sum_rain, -mean_sum_snow, -mean_Rented_Bike_Count, -mean_Rainfall, -mean_Snowfall)\n\n`summarise()` has grouped output by 'Date', 'Seasons'. You can override using\nthe `.groups` argument.\n\nmy_sample_final\n\n# A tibble: 353 × 12\n# Groups:   Date, Seasons [353]\n   Date       Seasons Holiday    sum_bikes sum_rain sum_snow mean_Temperature\n   &lt;date&gt;     &lt;fct&gt;   &lt;fct&gt;          &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n 1 2017-12-01 Winter  No Holiday      9539      0        0            -2.45  \n 2 2017-12-02 Winter  No Holiday      8523      0        0             1.32  \n 3 2017-12-03 Winter  No Holiday      7222      4        0             4.88  \n 4 2017-12-04 Winter  No Holiday      8729      0.1      0            -0.304 \n 5 2017-12-05 Winter  No Holiday      8307      0        0            -4.46  \n 6 2017-12-06 Winter  No Holiday      6669      1.3      8.6           0.0458\n 7 2017-12-07 Winter  No Holiday      8549      0       10.4           1.09  \n 8 2017-12-08 Winter  No Holiday      8032      0        0            -3.82  \n 9 2017-12-09 Winter  No Holiday      7233      0        0            -0.846 \n10 2017-12-10 Winter  No Holiday      3453      4.1     32.5           1.19  \n# ℹ 343 more rows\n# ℹ 5 more variables: mean_Humidity &lt;dbl&gt;, mean_Wind_speed &lt;dbl&gt;,\n#   mean_Visability &lt;dbl&gt;, mean_Dew_point_temperature &lt;dbl&gt;,\n#   mean_Solar_radiation &lt;dbl&gt;\n\n\nNow we’ll create some new summary statistics, along with some visuals.\n\nnumeric_final&lt;-my_sample_final[,c(-1:-3)]\n\ncategorical_final&lt;-my_sample_final[,c(1:3)]\n\nsapply(numeric_final, FUN)\n\n       sum_bikes  sum_rain  sum_snow mean_Temperature mean_Humidity\nmean   17485.309  3.575921  1.862890         12.77584      58.16627\nmedian 18563.000  0.000000  0.000000         13.73750      57.16667\nsd      9937.165 11.789868  8.804413         11.71840      14.86552\nmin      977.000  0.000000  0.000000        -14.73750      22.25000\nmax    36149.000 95.500000 78.700000         33.74167      95.87500\n       mean_Wind_speed mean_Visability mean_Dew_point_temperature\nmean         1.7261484       1434.0137                   3.954165\nmedian       1.6583333       1557.7500                   4.612500\nsd           0.5972809        491.1561                  12.992939\nmin          0.6625000        214.2917                 -27.750000\nmax          4.0000000       2000.0000                  25.037500\n       mean_Solar_radiation\nmean             0.56773191\nmedian           0.56500000\nsd               0.31612523\nmin              0.02916667\nmax              1.21666667\n\nsapply(sapply(categorical_final, unique), length)\n\n   Date Seasons Holiday \n    353       4       2 \n\nmy_sample_final_summary&lt;-my_sample_final|&gt;\n  group_by(Seasons, Holiday)|&gt;\n  summarize(across(where(is.numeric), list(\"mean\" = mean),\n                   .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'Seasons'. You can override using the\n`.groups` argument.\n\nggplot(my_sample_final_summary, aes(x=Seasons, y= mean_sum_bikes)) + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~Holiday)\n\n\n\n\n\n\n\nggplot(my_sample_final_summary, aes(x=mean_sum_rain, y= mean_sum_bikes, color=Seasons, shape = Holiday)) + \n  geom_point()\n\n\n\n\n\n\n\nggplot(my_sample_final_summary, aes(x=mean_mean_Wind_speed, y= mean_sum_bikes, color=Seasons, shape = Holiday)) + \n  geom_point()\n\n\n\n\n\n\n\nggplot(my_sample_final_summary, aes(x=mean_mean_Temperature, y= mean_sum_bikes, color=Seasons, shape = Holiday)) + \n  geom_point()\n\n\n\n\n\n\n\nggplot(my_sample_final_summary, aes(x=Seasons, y= mean_sum_rain)) + \n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\nggplot(my_sample_final_summary, aes(x=Seasons, y= mean_sum_snow)) + \n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\ncor(numeric_final)\n\n                             sum_bikes    sum_rain    sum_snow mean_Temperature\nsum_bikes                   1.00000000 -0.23910905 -0.26529110      0.753076732\nsum_rain                   -0.23910905  1.00000000 -0.02313404      0.144517274\nsum_snow                   -0.26529110 -0.02313404  1.00000000     -0.266963662\nmean_Temperature            0.75307673  0.14451727 -0.26696366      1.000000000\nmean_Humidity               0.03588697  0.52864263  0.06539191      0.404167486\nmean_Wind_speed            -0.19288142 -0.10167578  0.02088156     -0.260721792\nmean_Visability             0.16599375 -0.22199387 -0.10188902      0.002336683\nmean_Dew_point_temperature  0.65047655  0.26456621 -0.20955286      0.962796255\nmean_Solar_radiation        0.73589290 -0.32270413 -0.23343056      0.550274301\n                           mean_Humidity mean_Wind_speed mean_Visability\nsum_bikes                     0.03588697     -0.19288142     0.165993749\nsum_rain                      0.52864263     -0.10167578    -0.221993866\nsum_snow                      0.06539191      0.02088156    -0.101889019\nmean_Temperature              0.40416749     -0.26072179     0.002336683\nmean_Humidity                 1.00000000     -0.23425778    -0.559177334\nmean_Wind_speed              -0.23425778      1.00000000     0.206022636\nmean_Visability              -0.55917733      0.20602264     1.000000000\nmean_Dew_point_temperature    0.63204729     -0.28770322    -0.153551591\nmean_Solar_radiation         -0.27444967      0.09612635     0.271395906\n                           mean_Dew_point_temperature mean_Solar_radiation\nsum_bikes                                   0.6504765           0.73589290\nsum_rain                                    0.2645662          -0.32270413\nsum_snow                                   -0.2095529          -0.23343056\nmean_Temperature                            0.9627963           0.55027430\nmean_Humidity                               0.6320473          -0.27444967\nmean_Wind_speed                            -0.2877032           0.09612635\nmean_Visability                            -0.1535516           0.27139591\nmean_Dew_point_temperature                  1.0000000           0.38315713\nmean_Solar_radiation                        0.3831571           1.00000000"
  },
  {
    "objectID": "Homewrok_8.html#split-the-data",
    "href": "Homewrok_8.html#split-the-data",
    "title": "Homework 8",
    "section": "Split the Data",
    "text": "Split the Data\nNext, we’ll split the final data set into a training set and a testing set, with a 75/25 split, stratified by Seasons.\n\nset.seed(558)\n\nmy_sample_split&lt;-initial_split(my_sample_final, prop = 0.75, strata = Seasons)\nmy_sample_train&lt;-training(my_sample_split)\nmy_sample_test&lt;-testing(my_sample_split)\n\nAdd a 10 fold CV split on the training set. CV is an alternative to creating a testing/training set.\n\nget_cv_splits &lt;- function(data, num_folds){\n  #get fold size\n  size_fold &lt;- floor(nrow(data)/num_folds)\n  #get random indices to subset the data with\n  random_indices &lt;- sample(1:nrow(data), size = nrow(data), replace = FALSE)\n  #create a list to save our folds in\n  folds &lt;- list()\n  #now cycle through our random indices vector and take the appropriate observations to each fold\n  for(i in 1:num_folds){\n    if (i &lt; num_folds) {\n      fold_index &lt;- seq(from = (i-1)*size_fold +1, to = i*size_fold, by = 1)\n      folds[[i]] &lt;- data[random_indices[fold_index], ]\n    } else {\n      fold_index &lt;- seq(from = (i-1)*size_fold +1, to = length(random_indices), by = 1)\n      folds[[i]] &lt;- data[random_indices[fold_index], ]\n    }\n  }\n  return(folds)\n}\nfolds &lt;- get_cv_splits(my_sample_train, 10)"
  },
  {
    "objectID": "Homewrok_8.html#fitting-mlr-models",
    "href": "Homewrok_8.html#fitting-mlr-models",
    "title": "Homework 8",
    "section": "Fitting MLR Models",
    "text": "Fitting MLR Models\nWe’re going to create three different recipes for a linear model.\nThe first recipe includes dummy variables of weekday/weekend, season, and holiday. All numeric variables are normalized.\n\nr_1&lt;-recipe(sum_bikes ~., data=my_sample_train)|&gt;\n  step_date(Date, features=c(\"dow\"))|&gt;\n  step_mutate(Day =  factor(if_else(Date_dow == \"Sat\" | Date_dow == \"Sun\", 1, 2)))|&gt;\n  step_rm(Date, Date_dow)|&gt;\n  step_normalize(all_numeric(), -all_outcomes())|&gt;\n  step_dummy(Seasons,Holiday, Day)\n\nThe second recipe adds interactions between seasons/holiday, seasons/temp, and temp/rainfall.\n\nr_2&lt;-recipe(sum_bikes ~., data=my_sample_train)|&gt;\n  step_date(Date, features=c(\"dow\"))|&gt;\n  step_mutate(Day =  factor(if_else(Date_dow == \"Sat\" | Date_dow == \"Sun\", 1, 2)))|&gt;\n  step_rm(Date, Date_dow)|&gt;\n  step_normalize(all_numeric(), -all_outcomes())|&gt;\n  step_dummy(Seasons,Holiday, Day)|&gt;\n  step_interact(terms= ~ Holiday_No.Holiday*starts_with(\"Seasons\"))|&gt;\n  step_interact(terms= ~ starts_with(\"Seasons\")*mean_Temperature)|&gt;\n  step_interact(terms= ~ sum_rain*mean_Temperature)\n\nThe third recipe adds a quadratic term for each numeric predictor.\n\nr_3&lt;-recipe(sum_bikes ~., data=my_sample_train)|&gt;\n  step_date(Date, features=c(\"dow\"))|&gt;\n  step_mutate(Day =  factor(if_else(Date_dow == \"Sat\" | Date_dow == \"Sun\", 1, 2)))|&gt;\n  step_rm(Date, Date_dow)|&gt;\n  step_normalize(all_numeric(), -all_outcomes())|&gt;\n  step_dummy(Seasons, Holiday, Day)|&gt;\n  step_interact(terms= ~ Holiday_No.Holiday*starts_with(\"Seasons\"))|&gt;\n  step_interact(terms= ~ starts_with(\"Seasons\")*mean_Temperature)|&gt;\n  step_interact(terms= ~ sum_rain*mean_Temperature)|&gt;\n  step_mutate(sum_rain^2, sum_snow^2, mean_Temperature^2, mean_Humidity^2, mean_Wind_speed^2, mean_Visability^2, mean_Dew_point_temperature^2, mean_Solar_radiation^2)\n\nTest the models:\n\nmy_sample_model&lt;-linear_reg() %&gt;%\n  set_engine(\"lm\")\n\nmy_sample_r1_wfl &lt;- workflow() |&gt;\n  add_recipe(r_1) |&gt;\n  add_model(my_sample_model)\n\nfirst_model&lt;- my_sample_r1_wfl|&gt;\n  fit(my_sample_train)\nfirst_model|&gt;\n  tidy()\n\n# A tibble: 14 × 5\n   term                       estimate std.error statistic  p.value\n   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                  15415.     1357.    11.4   2.25e-24\n 2 sum_rain                     -1890.      330.    -5.72  3.04e- 8\n 3 sum_snow                      -275.      271.    -1.02  3.10e- 1\n 4 mean_Temperature             -7942.     4666.    -1.70  9.00e- 2\n 5 mean_Humidity                -4195.     1777.    -2.36  1.90e- 2\n 6 mean_Wind_speed               -681.      289.    -2.35  1.94e- 2\n 7 mean_Visability               -336.      356.    -0.942 3.47e- 1\n 8 mean_Dew_point_temperature   13750.     5487.     2.51  1.29e- 2\n 9 mean_Solar_radiation          4325.      466.     9.29  8.09e-18\n10 Seasons_Spring               -5440.      812.    -6.70  1.36e-10\n11 Seasons_Summer               -3826.     1018.    -3.76  2.11e- 4\n12 Seasons_Winter               -8299.     1073.    -7.73  2.60e-13\n13 Holiday_No.Holiday            4688.     1216.     3.86  1.47e- 4\n14 Day_X2                        2755.      561.     4.91  1.66e- 6\n\nmy_sample_10_fold &lt;- vfold_cv(my_sample_train, 10)\n\nmy_sample_CV_fits &lt;- my_sample_r1_wfl |&gt;\n  fit_resamples(my_sample_10_fold)\n\nmy_sample_r2_wfl &lt;- workflow() |&gt;\n  add_recipe(r_2) |&gt;\n  add_model(my_sample_model)\n\nsecond_model&lt;- my_sample_r2_wfl|&gt;\n  fit(my_sample_train)\nsecond_model|&gt;\n  tidy()\n\n# A tibble: 21 × 5\n   term                       estimate std.error statistic  p.value\n   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                 11781.      2108.     5.59  6.17e- 8\n 2 sum_rain                    -2184.       353.    -6.18  2.73e- 9\n 3 sum_snow                     -156.       200.    -0.780 4.36e- 1\n 4 mean_Temperature            -5200.      3707.    -1.40  1.62e- 1\n 5 mean_Humidity               -4204.      1381.    -3.04  2.59e- 3\n 6 mean_Wind_speed              -454.       217.    -2.09  3.74e- 2\n 7 mean_Visability                45.2      279.     0.162 8.71e- 1\n 8 mean_Dew_point_temperature  12498.      4253.     2.94  3.61e- 3\n 9 mean_Solar_radiation         3466.       344.    10.1   3.56e-20\n10 Seasons_Spring                340.      2758.     0.123 9.02e- 1\n# ℹ 11 more rows\n\nmy_sample_CV_fits_2 &lt;- my_sample_r2_wfl |&gt;\n  fit_resamples(my_sample_10_fold)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x2\n\n\n\n\nmy_sample_r3_wfl &lt;- workflow() |&gt;\n  add_recipe(r_3) |&gt;\n  add_model(my_sample_model)\n\nthird_model&lt;- my_sample_r3_wfl|&gt;\n  fit(my_sample_train)\n\nthird_model|&gt;\n  tidy()\n\n# A tibble: 29 × 5\n   term                       estimate std.error statistic  p.value\n   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                  12066.     2094.     5.76  2.58e- 8\n 2 sum_rain                     -3509.      611.    -5.74  2.88e- 8\n 3 sum_snow                       102.      650.     0.157 8.76e- 1\n 4 mean_Temperature               719.     4183.     0.172 8.64e- 1\n 5 mean_Humidity                -1872.     1562.    -1.20  2.32e- 1\n 6 mean_Wind_speed               -564.      254.    -2.22  2.74e- 2\n 7 mean_Visability                168.      302.     0.557 5.78e- 1\n 8 mean_Dew_point_temperature    5624.     4887.     1.15  2.51e- 1\n 9 mean_Solar_radiation          3194.      360.     8.86  2.05e-16\n10 Seasons_Spring                1557.     2737.     0.569 5.70e- 1\n# ℹ 19 more rows\n\nmy_sample_CV_fits_3 &lt;- my_sample_r3_wfl |&gt;\n  fit_resamples(my_sample_10_fold)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x2\nThere were issues with some computations   A: x2\n\n\n\n\nrbind(my_sample_CV_fits_3 |&gt;\n  collect_metrics(), my_sample_CV_fits_2 |&gt;\n  collect_metrics(), my_sample_CV_fits |&gt;\n    collect_metrics())\n\n# A tibble: 6 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   2999.       10 270.     Preprocessor1_Model1\n2 rsq     standard      0.906    10   0.0162 Preprocessor1_Model1\n3 rmse    standard   3075.       10 252.     Preprocessor1_Model1\n4 rsq     standard      0.902    10   0.0148 Preprocessor1_Model1\n5 rmse    standard   4099.       10 125.     Preprocessor1_Model1\n6 rsq     standard      0.826    10   0.0119 Preprocessor1_Model1\n\n\nBased on RMSE, the third model is the best.\n\nthird_model|&gt;\n  last_fit(my_sample_split)|&gt;\n  collect_metrics()\n\nError in `last_fit()`:\n! `last_fit()` is not well-defined for a fitted workflow.\n\n\n\nfinal_model&lt;- third_model|&gt;\n    extract_fit_parsnip()|&gt;\n  tidy()"
  }
]